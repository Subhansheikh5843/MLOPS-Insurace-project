name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run Docker Image to serve users
        run: |
         docker run -d -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" -e MONGODB_URL="${{ secrets.MONGODB_URL }}" -p 5000:5000 "${{ steps.login-ecr.outputs.registry }}"/"${{ secrets.ECR_REPO }}":latest


# -------------------explantion--------------------------

# ------------------------CI explain---------------------

# Below is a comprehensive, step-by-step explanation of the entire GitHub Actions workflow code in simple terms. This workflow is set up to build a Docker image of your application and push it to Amazon ECR when code is pushed to the main branch. Although the workflow’s name indicates that its ultimate purpose is to deploy an application Docker image to an EC2 instance, this snippet covers the "Continuous Integration" part, i.e. building and pushing the image.

# Workflow Name and Trigger

# name: Deploy Application Docker Image to EC2 instance
# What It Means:
# The workflow is named "Deploy Application Docker Image to EC2 instance." This describes its intent: to eventually deploy your Docker image on an EC2 instance. However, the code we are discussing handles building the image and pushing it to a container registry.

# on:
#   push:
#     branches: [main]
# When It Runs:
# The workflow automatically triggers whenever there is a push (a change) to the main branch of your repository. This means every time you update the main code, the workflow starts.

# Jobs and Environment Setup

# jobs:
#   Continuous-Integration:
#     runs-on: ubuntu-latest
# Job Name:
# The job is named "Continuous-Integration."

# Environment:
# It runs on the latest Ubuntu virtual environment provided by GitHub Actions. This means the job has a clean Ubuntu machine to work on.

# Steps in the Continuous Integration Job
# 1. Checkout Code

#       - name: Checkout
#         uses: actions/checkout@v2
# Purpose:
# This step downloads the code from your GitHub repository to the virtual machine so that the workflow can work with your project files.

# How It Works:
# It uses a pre-built action (actions/checkout@v2) to perform the code checkout. This action is maintained by GitHub and is optimized to retrieve your code quickly.

# 2. Configure AWS Credentials

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
# Purpose:
# This step sets up the AWS credentials required to interact with AWS services—such as pushing the Docker image to Amazon ECR.

# How It Works:

# The action aws-actions/configure-aws-credentials@v1 is used.

# It takes sensitive credentials (AWS Access Key ID, Secret Access Key, and the AWS region) from GitHub Secrets.

# Using secrets keeps these credentials secure and out of your codebase.

# 3. Login to Amazon ECR

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
# Purpose:
# This step logs into Amazon Elastic Container Registry (ECR)—the AWS service used to store Docker images.

# How It Works:

# The action aws-actions/amazon-ecr-login@v1 handles the login automatically.

# The step is given an ID (login-ecr) so that its outputs (specifically, the ECR registry URL) can be used in later steps.

# 4. Build, Tag, and Push Image to Amazon ECR

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
#           IMAGE_TAG: latest
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
# Let's break down this multi-part step in full detail:

# Step Name and ID:

# Name: "Build, tag, and push image to Amazon ECR" clearly describes that this step is responsible for creating and uploading the Docker image.

# ID: id: build-image allows later workflow steps to refer back to this step’s outputs.

# Environment Variables:
# The env: block defines three variables used in the Docker commands:

# ECR_REGISTRY:
# Gets its value from the output of the previous login step (${{ steps.login-ecr.outputs.registry }}). This variable holds the URL of your ECR registry (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com).

# ECR_REPOSITORY:
# Reads the repository name from a GitHub secret (${{ secrets.ECR_REPO }}). This value identifies your specific repository in ECR (for example, my-docker-app).

# IMAGE_TAG:
# Set to latest, indicating that the Docker image will be tagged as the latest version.

# Run Section (Shell Commands):
# The run: block includes a sequence of commands executed on the Ubuntu runner:

# Build the Docker Image:

# docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
# Explanation:
# This command builds your Docker image using the Dockerfile in the current directory (denoted by .).

# Tagging:
# The -t flag attaches a tag to the image. It constructs the full image name by combining:

# The registry URL (ECR_REGISTRY)

# The repository name (ECR_REPOSITORY)

# The tag (latest) This might result in an image name like:
# 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-docker-app:latest.

# Push the Docker Image:


# docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
# Explanation:
# This command uploads the Docker image from your local build environment (the GitHub runner) to your Amazon ECR repository. After running, your image is stored in Amazon ECR and becomes available for later deployment steps.

# Set an Output Variable:


# echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
# Explanation:
# This line tells GitHub Actions to create an output variable named image and assign it the full name of the Docker image. Other steps in your workflow can then refer to this variable, ensuring they use the correct image (for example, when deploying).



# -------------cd explain---------------------------------
# This job is called Continuous-Deployment. Its purpose is to take the Docker image (built and pushed in the Continuous-Integration job) and deploy it so that your application runs and serves users. In this case, the deployment happens on a self-hosted runner (for example, an EC2 instance that you manage).

# Detailed Breakdown
# 1. Job Definition and Dependencies

# Continuous-Deployment:
#   needs: Continuous-Integration
#   runs-on: self-hosted
# needs: Continuous-Integration
# This line tells GitHub Actions that the Continuous-Deployment job should only run after the Continuous-Integration job completes successfully. It creates a dependency so that deployment happens only when the image build and push are successful.

# runs-on: self-hosted
# This specifies that the job will run on your own machine (like an EC2 instance) rather than on GitHub’s cloud. You would set up a self-hosted runner on your own infrastructure to actually run the container.

# 2. Steps in the Continuous-Deployment Job
# Step 2.1: Checkout the Code

# - name: Checkout
#   uses: actions/checkout@v3
# What It Does:
# This step downloads (checks out) your repository’s code to the self-hosted runner.

# Why It's Needed:
# Although the main task here is to run the Docker container, checking out the code ensures that your environment is consistent and may be used for future steps (logging, debugging, etc.).

# Step 2.2: Configure AWS Credentials

# - name: Configure AWS credentials
#   uses: aws-actions/configure-aws-credentials@v1
#   with:
#     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
# What It Does:
# This step sets up the AWS credentials on your self-hosted runner.

# How It Works:

# It uses an action called aws-actions/configure-aws-credentials@v1.

# The credentials (AWS access key, secret key, and region) are securely obtained from GitHub Secrets.

# Why It's Important:
# These credentials allow your deployment environment to interact with AWS services if required. For example, if your Docker container or other processes need to access AWS resources later.

# Step 2.3: Login to Amazon ECR

# - name: Login to Amazon ECR
#   id: login-ecr
#   uses: aws-actions/amazon-ecr-login@v1
# What It Does:
# This step logs into Amazon ECR (Elastic Container Registry), which is where your Docker image is stored.

# How It Works:

# The action aws-actions/amazon-ecr-login@v1 handles the login process.

# The step is given an ID (login-ecr), which means its outputs (like the registry URL) can be used later.

# Why It's Needed:
# To run your Docker container, your self-hosted runner must be able to pull the Docker image from ECR. Logging in establishes that connection.

# Step 2.4: Run the Docker Image to Serve Users

# - name: Run Docker Image to serve users
#   run: |
#     docker run -d \
#       -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
#       -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
#       -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
#       -e MONGODB_URL="${{ secrets.MONGODB_URL }}" \
#       -p 5000:5000 \
#       "${{ steps.login-ecr.outputs.registry }}"/"${{ secrets.ECR_REPO }}":latest
# What It Does:
# This step launches (runs) the Docker container using the image that was previously built and pushed to ECR.

# Command Breakdown:

# docker run -d:
# Runs the container in detached mode, meaning it runs in the background.

# Environment Variables (-e flags):

# AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION:
# These are passed into the container. They are set up from GitHub Secrets so that the container has the necessary configuration to talk to AWS if needed.

# MONGODB_URL:
# This environment variable is also passed to the container so that your application can connect to your MongoDB database.

# Port Mapping (-p 5000:5000):
# This maps port 5000 on the host (the self-hosted runner) to port 5000 inside the container. This allows users to access your application via port 5000.

# Image Reference:
# The image to run is specified by combining:

# The registry URL from the output of the login-ecr step.

# The repository name, which is stored in GitHub Secrets (${{ secrets.ECR_REPO }}).

# The tag latest.
# This tells Docker exactly which image to pull and run.

# Why It's Important:
# This is the final step where your application is actually deployed and made live. The container starts running, which means your application is now serving user requests
